---
title: Installing and Configuring OverOps Reliability Platform for PCF
owner: Partners
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure OverOps Reliability Platform for PCF.

To install the OverOps Reliability Platform for PCF file on the Ops Manager Installation Dashboard, do the following:

1. Download the product file for **OverOps Reliability Platform for PCF** from Pivotal Network.

1. Navigate to the Ops Manager Installation Dashboard and click **Import a Product** to upload the product file. 

1. Under the **Import a Product** button, click **+** next to the version number of **OverOps Reliability Platform for PCF** file. 
This adds the tile to your staging area.

1. Once the Tile is staged there maybe be a prompt to enter a stemcell. If there is the reccomended stemcell used in development is the Ubuntu Xenial [Stemcell](https://network.pivotal.io/products/stemcells-ubuntu-xenial/)


1. Click the newly added **OverOps Reliability Platform for PCF** tile.

1.Click Assign AZ's and Networks button and fill out.

<%= image_tag("screenshots/AZ_Network_ex.png") %>

1. In the **OverOps Collector** section enter the **OverOps Backend URL**, the **OverOps Installation Key**, and your **Server Name**. If you are unsure of these values, please look at the OverOps [Documentation](https://doc.overops.com/docs/collector-properties).

<%= image_tag("screenshot/OverOpsCollector_form.png") %>

1. Click **Save**.

1. Return to the Ops Manager Installation Dashboard and click **Apply changes** to install OverOps Reliability Platform for PCF tile.

##<a id='connect'></a> Connect OverOps Collector to Agent

1. Ensure that your application is deployed and ensure it is using the [Java Buildpack](https://github.com/cloudfoundry/java-buildpack.git).

1. [Map a route](https://docs.cloudfoundry.org/devguide/deploy-apps/routes-domains.html#internal-routes) to the collector that was deployed. Use the apps.internal domain in your environment to ensure your collector is not accessible from outside sources.

     ```
     cf map-route overops-collector apps.internal --hostname collector
     ```
1. Once a route is mapped, next enable [container to container communication](https://docs.pivotal.io/pivotalcf/2-6/devguide/deploy-apps/cf-networking.html) using a network policy. 
    
    ```
    cf add-network-policy spring-music-5 --destination-app overops-collector-0.9.4 --protocol tcp --port 8080
    ```

    <%= image_tag("screenshots/networking_example.png")%>

1. [Create a user-provided service](https://docs.cloudfoundry.org/devguide/services/user-provided.html) to enable the Takipi Agent Framework and deliver the Collector hostname and port to your application.

      ```
      cf cups takipi-service -t "takipi" -p '{"collector_host":"collector.apps.internal", "collector_port":"8080"}'
      ```
      
      <%= image_tag("screenshots/ups_example_config.png") %>

1. Bind `takipi-service` to your application.

      ```
      cf bind-service app_name takipi-service
      ```

1. Restage your application.

      ```
      cf restage app_name
      ```

1. Once the service is bound, confirm connectivity with the OverOps Analysis Server.
      <%= image_tag("screenshots/connected_app_to_collector.png")%>

